    LUTs     FFs   BRAMs    DSPs : ProcessingElement.maxj
  103286  117439    1248      64 : resources used by this file
  19.68%  11.19%  48.62%   3.26% : % of available
  57.72%  50.84%  61.75%  68.09% : % of total used
  88.25%  78.67%  90.57%  68.09% : % of user resources

                                 : /*** Single pipe SpMV Processing element. */
                                 : 
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.*;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.*;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
                                 : 
                                 : public class ProcessingElement extends KernelLib {
                                 : 
                                 :     private final DFEVar reducedOut;
                                 : 
                                 :     protected ProcessingElement(KernelLib owner,
                                 :                                 int fpL,
                                 :                                 boolean dbg,
                                 :                                 DFEVar rowLength,
                                 :                                 DFEVar rowFinished,
                                 :                                 DFEVar indptr,
                                 :                                 DFEVar value,
                                 :                                 int id,
                                 :                                 int cacheSize,
                                 :                                 boolean vRomPortSharing) {
                                 :         super(owner);
                                 : 
                                 :         optimization.pushPipeliningFactor(0.5);
                                 :         optimization.pushDSPFactor(1);
                                 : 
                                 :         DFEType FLOAT = dfeFloat(11, 53);
                                 : 
                                 :         // counter is set to 0 when row has finished
                                 :         // while counter is less than fpL, we can output results
                                 :         DFEVar counterReset = rowFinished.eq(1) | rowFinished.eq(2);
                                 : 
                                 :         int memId = vRomPortSharing? (id / 2) : id;
     706     687    1152       0 :         Memory<DFEVar> vRom = mem.alloc(FLOAT, cacheSize);
                                 :         vRom.mapToCPU("vRom" + memId);
                                 : 
                                 :         // // --- compute
                                 :         optimization.pushDSPFactor(1);
                                 :         Params params = control.count.makeParams(32)
      16       0       0       0 :             .withReset(rowFinished.eq(2) | rowFinished.eq(3))
     512     558       0       0 :             .withMax(rowLength + 1);
    1596    1776       0       0 :         DFEVar nnzCounter = control.count.makeCounter(params).getCount();
                                 : 
                                 :         DFEVar carriedSum = dfeFloat(11, 53).newInstance(this);
    4998   12697      16      64 :         DFEVar newValue = value * vRom.read(indptr);
   17264   18715      16       0 :         DFEVar newSum = newValue + (nnzCounter < fpL ? 0 : carriedSum);
                                 :         carriedSum <== stream.offset(newSum, -fpL);
                                 : 
                                 :         // First we need to count last no-more-than 16 nonzeros in each row
                                 :         // (16 stands for depth of log-add reduce circuit).
     656    1052       0       0 :         DFEVar firstValidPartialSum = (rowLength + 1 > fpL)? (rowLength + 1 - fpL) : 0;
     414      16       0       0 :         DFEVar validPartialSums =  (nnzCounter >= firstValidPartialSum);
   77124   81938      64       0 :         LogAddReduce r = new LogAddReduce(this,
                                 :                                           validPartialSums,
                                 :                                           counterReset,
                                 :                                           newSum, FLOAT, fpL);
                                 : 
                                 :         this.reducedOut = r.getOutput();
                                 :         optimization.popDSPFactor();
                                 : 
                                 :         if (dbg) {
                                 :             DFEVar cycleCount = control.count.simpleCounter(32);
                                 :             debug.simPrintf("Pipe %d, cycle %d, validpartialSums %d, nnzcounter %d, output %f, enable %d\n",
                                 :                             id, cycleCount, validPartialSums, nnzCounter, reducedOut, counterReset);
                                 :         }
                                 :     }
                                 : 
                                 :     DFEVar getReducedOut() {
                                 :         return reducedOut;
                                 :     }
                                 : 
                                 : }
