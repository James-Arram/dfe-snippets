import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;

class NestedCounterVariableBoundaryKernel extends Kernel {

    private static final int     counterWidth = 32;
    private static final DFEType scalarType = dfeUInt(counterWidth);

    protected NestedCounterVariableBoundaryKernel(KernelParameters parameters)
    {
        super(parameters);

        /* CPU equivalent:
         *
         *   for (int outer = 0; ; outer++)
         *   {
         *       for (int nested = 0; nested < input[outer]; nested++)
         *       {
         *           // do something
         *       }
         *   }
         */

        // example of input: (each value equals the number of times it repeats)
        //   2,2,
        //   3,3,3,
        //   5,5,5,5,5,
        //   1,
        //   2,2
        // etc.
        DFEVar input = io.input("input", scalarType);

        SMIO sm = addStateMachine("InputDependentCounters",
                new InputDependentCountersSM(this, "input", counterWidth));
		sm.connectInput("input", input);

        io.output("outer",  sm.getOutput("outer"), scalarType );
        io.output("nested", sm.getOutput("inner"), scalarType );
    }

}