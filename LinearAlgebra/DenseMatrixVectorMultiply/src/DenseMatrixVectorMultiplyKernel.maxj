/***
 * Implements a dense matrix vector multiply A * v = b where v is stored in
 * on-chip memory and A and b's are streamed
 *
 * Assumes a 2D strided access.
 *
 * Memory traffic could be reduced further by increasing the stride size in
 * bursts (currently 1 burst) and increasing the width of the input vector (v).
 */

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;

import java.util.List;

class DenseMatrixVectorMultiplyKernel extends Kernel {
    int cacheSize = 1024;

    protected DenseMatrixVectorMultiplyKernel(KernelParameters parameters, int width) {
        super(parameters);
        DFEVectorType<DFEVar> vtype = new DFEVectorType<DFEVar> (dfeFloat(11, 53), width);
        DFEVar n = io.scalarInput("striperows", dfeUInt(32));
        DFEVar nstripes = io.scalarInput("nstripes", dfeUInt(32));

        // accumulated bs from previous iterations
        DFEVar b = io.input("prevb", dfeFloat(11, 53));
        DFEVector<DFEVar> a = io.input("a", vtype);

        CounterChain chain = control.count.makeCounterChain();
        DFEVar stripeCount = chain.addCounter(nstripes, 1);
        DFEVar row = chain.addCounter(n, 1);

        // only read on the first cycle of each stripe
        DFEVar readEnable = row === 0;
        DFEVector<DFEVar> v = io.input("v", vtype, readEnable);

        DFEVector<DFEVar> mult = a * v;
        DFEVar res = b + reduce(mult.getElementsAsList());

        io.output("newb", res, dfeFloat(11, 53));
        DFEVar writeEnable = stripeCount === (nstripes - 1);

        // output results to CPU on the final column of the stripe
        io.output("b", res, dfeFloat(11, 53), writeEnable);

        //debug.simPrintf("-------------------------------------");
        //debug.simPrintf("row: %d stripe: %d prevb %f newb %f\n",
            //row, stripeCount, b, res);
        //debug.simPrintf("a = ");
        //for (int i = 0; i < width; i ++)
          //debug.simPrintf("%.1f ", a[i]);
        //debug.simPrintf("\n");

        //debug.simPrintf("v = ");
        //for (int i = 0; i < width; i ++)
          //debug.simPrintf("%.1f ", v[i]);
        //debug.simPrintf("\n");
    }

    DFEVar reduce(List<DFEVar> vector) {
      if (vector.size() == 1)
        return vector.get(0);
      return
        reduce(vector.subList(0, vector.size() / 2)) +
        reduce(vector.subList(vector.size() / 2, vector.size()));
    }

}
