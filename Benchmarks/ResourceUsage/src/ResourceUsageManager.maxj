/***
	TODO Add a descriptive comment!
*/
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class ResourceUsageManager extends CustomManager{

    private static final String s_kernelName  = "ResourceUsageKernel";

    ResourceUsageManager(EngineParameters ep)
    {
        super(ep);

        KernelBlock k = addKernel(new ResourceUsageKernel(makeKernelParameters(s_kernelName)));

	for (String s : k.getAllInputs())
	    k.getInput(s) <== addStreamFromCPU(s);

	for (String s : k.getAllOutputs())
	    addStreamToCPU(s) <== k.getOutput(s);
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes type = CPUTypes.INT32;
        int size = type.sizeInBytes();

        InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT);
        InterfaceParam sizeBytes = N * size;
        InterfaceParam spSizeBytes = N * CPUTypes.FLOAT.sizeInBytes();
        InterfaceParam dpSizeBytes = N * CPUTypes.DOUBLE.sizeInBytes();

        engine_interface.setTicks(s_kernelName, N);

        engine_interface.setStream("a", type, sizeBytes);
	engine_interface.setStream("b", type, sizeBytes);
        engine_interface.setStream("intResult", type, sizeBytes);
        engine_interface.setStream("spResult", CPUTypes.FLOAT, spSizeBytes);
        engine_interface.setStream("dpResult", CPUTypes.DOUBLE, dpSizeBytes);
        return engine_interface;
    }


    public static void main(String[] args) {
        ResourceUsageManager manager = new ResourceUsageManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}
