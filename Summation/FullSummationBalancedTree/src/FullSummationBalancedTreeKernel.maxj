package fullsummationbalancedtree;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class FullSummationBalancedTreeKernel extends Kernel {

    private static final int     counterWidth = 32;
    private static final DFEType dataType   = dfeFloat(8, 24); // C float
    private static final DFEType scalarType = dfeUInt(counterWidth);

    protected FullSummationBalancedTreeKernel(KernelParameters parameters,
                                              int              loopLength,
                                              int              minStreamLength)
    {
        super(parameters);

        DFEVar index = control.count.simpleCounter(counterWidth);
        DFEVar input = io.input("input", dataType);
        DFEVar N     = io.scalarInput("N", scalarType);

        DFEVar carriedSum = dataType.newInstance(this); // sourceless stream
        DFEVar sum    = (index < loopLength) ? 0.0 : carriedSum;
        DFEVar newSum = input + sum;

        carriedSum <== stream.offset(newSum, -loopLength);

        DFEVar finalSum = summationTree(newSum, 0, loopLength-1);

        // streaming partial sums, for comparison and cross-validation only
        io.output("partial", newSum, dataType, index >= N - loopLength );
        // we cannot output just one value: PCIe stream length must be multiple
        // of 16 bytes. The last (4th) item in this stream is the total sum.
        io.output("output", finalSum, dataType, index >= N - minStreamLength);
    }


    // Recursively produce binary tree of additions. Leaf nodes are
    // offsets to source stream.
    private DFEVar summationTree(DFEVar src, int left, int right)
    {
        if (left == right)
        {
            return stream.offset(src, -left);
        }
        int middle = left + (right - left)/2;
        return summationTree(src, left, middle) + summationTree(src, middle + 1, right);
    }
}
