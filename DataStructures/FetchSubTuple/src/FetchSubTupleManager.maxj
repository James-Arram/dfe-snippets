import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class FetchSubTupleManager extends CustomManager{

    private static final String s_kernelName  = "FetchSubTupleKernel";
    private static final int tupleSize = 8;

    FetchSubTupleManager(EngineParameters ep)
    {
        super(ep);

        config.setDefaultStreamClockFrequency(150);

        KernelBlock k = addKernel(new FetchSubTupleKernel(makeKernelParameters(s_kernelName), tupleSize));

        k.getInput("input") <== addStreamFromCPU("input");
        k.getInput("sizes") <== addStreamFromCPU("sizes");
        addStreamToCPU("output") <== k.getOutput("output");
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes type = CPUTypes.INT32;
        int size = type.sizeInBytes();

        InterfaceParam numInputs = engine_interface.addParam("numInputs", CPUTypes.INT);
        InterfaceParam numCycles = engine_interface.addParam("numCycles", CPUTypes.INT);
        InterfaceParam inputSizeBytes = numInputs * size;
        InterfaceParam sizesSizeBytes = numCycles * size;

        engine_interface.setTicks(s_kernelName, numCycles);

        engine_interface.setStream("input",  type, inputSizeBytes);
        engine_interface.setStream("output", type, inputSizeBytes);
        engine_interface.setStream("sizes",  type, sizesSizeBytes);
        return engine_interface;
    }


    public static void main(String[] args) {
        FetchSubTupleManager manager = new FetchSubTupleManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.addMaxFileConstant("tupleSize", tupleSize);
        manager.build();
    }
}
