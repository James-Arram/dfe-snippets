/***
    Here we benchmark how DRAM bandwidth (simple reads from DRAM using default
    memory controller and linear access pattern) scales with the number of 64bit
    vector entries read from 2 input streams.
*/
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;


class DramBandwidthBenchmarkDefaultMemCtrlKernel extends Kernel {

    private static final DFEType dataType   = dfeUInt(64);

    private static final int     numElements = 1536/64;
    private static final DFEVectorType dataVectorType =
                                         new DFEVectorType<DFEVar> (dataType, numElements);

    protected DramBandwidthBenchmarkDefaultMemCtrlKernel(KernelParameters parameters)
    {
        super(parameters);

        DFEVar ticksToRun   = io.scalarInput("ticks", dfeUInt(64));
        DFEVar kernelTicks          = control.count.simpleCounter(64);
        DFEVector<DFEVar> input0     = io.input("vector0", dataVectorType,
                                                kernelTicks < ticksToRun);
        DFEVector<DFEVar> input1     = io.input("vector1", dataVectorType,
                                                kernelTicks < ticksToRun);

        // we need to do some work to avoid optimising this kernel out completely.
        DFEVar sum0 = adderTree(input0, 0, numElements-1);
        DFEVar sum1 = adderTree(input1, 0, numElements-1);
        DFEVar sum = sum0 + sum1;

        // we need to output something to avoid optimising it out
        io.output("sum", sum, dataType, control.count.pulse(16) );
    }

    // Recursively produce binary tree of additions. Leaf nodes are
    // offsets to source stream.
    private DFEVar adderTree(DFEVector<DFEVar> src, int left, int right)
    {
        if (left == right)
        {
            return src[left];
        }
        int middle = left + (right - left)/2;
        return adderTree(src, left, middle) + adderTree(src, middle + 1, right);
    }
}
