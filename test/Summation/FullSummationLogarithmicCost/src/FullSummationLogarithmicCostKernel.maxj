/***
    This kernel demonstrates how to build an accumulator with just
    logarithmic number of adders (wrt to the summator latency and/or
    latency of accumulation feedback loop).

    Once input stream is accumulated into a number of partial sums,
    these partial sums are sum-reduced to a single value via feed-forward
    chain of adders. Instead of building a balanced tree of adders
    that are simultaneously fed with all partial sums (calculating all
    sum-reductions in parallel), we pipeline these sum-reductions,
    effectively implementing Polish notation calculator. The key is to
    wait for enough cycles until all arguments of next adder are ready.

    NB: works well for number of inputs greater than latency of partial
    accumulator. This caused by synchronization that is due to presence
    of feedback loop. Once the number of inputs exceeds feedback latency,
    the results are correct, even if the number of meaningful values to
    be accumulated is less than that latency. Otherwise, the result is
    random.

    Compiling in hardware: kernel frequency 300Mhz is fine, 350Mhz is
    challenging (more cost tables or very high effort)
*/
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class FullSummationLogarithmicCostKernel extends Kernel {

    private static final int     counterWidth = 32;
    private static final DFEType dataType   = dfeFloat(11, 53); // C double
    private static final DFEType scalarType = dfeUInt(counterWidth);

    protected FullSummationLogarithmicCostKernel(KernelParameters parameters,
                                  int              numPartialSums,
                                  int              minStreamLength)
    {
        super(parameters);

        DFEVar index = control.count.simpleCounter(counterWidth);
        DFEVar input = io.input("input", dataType);
        DFEVar N     = io.scalarInput("N", scalarType);


        // Accumulating inputs into partial sums
        DFEVar carriedSum    = dataType.newInstance(this);
        DFEVar partialSum    = (index < numPartialSums) ? 0.0 : carriedSum;
        DFEVar newPartialSum = input + partialSum;
        carriedSum <== stream.offset(newPartialSum, -numPartialSums);


        // Sum-reducing partial sums with logarithmic number of adders:

        // Here we connect sum-reduce feed-forward chain to just 2
        // elements of newPartialSum stream/feedback loop, not to all
        // 16 elements of feedback loop as balanced tree would do.
        DFEVar sum2 = newPartialSum + stream.offset(newPartialSum, 1);

        // Then, we save the result of previous addition until result of
        // next addition is ready (positive stream offsets below serve as
        // syntactic sugar for saving previous sum temporarily).
        // Here we exploit the fact that new values populate feedback loop
        // (thought as a queue) one after another; we add them as they come.
        DFEVar sum4 = sum2 + stream.offset(sum2, 2);
        DFEVar sum8 = sum4 + stream.offset(sum4, 4);
        // This gives total sum, provided numPartialSums=16.
        DFEVar sum16 = sum8 + stream.offset(sum8, 8);



        // streaming partial sums, for comparison and cross-validation only
        io.output("partial", newPartialSum, dataType);


        // we cannot output just one value: PCIe stream length must be multiple
        // of 16 bytes. The last (4th) item in this stream is the total sum.
        DFEVar lowerBound = (N >= numPartialSums)?
                                (N - numPartialSums) :
                                (N - minStreamLength);
        DFEVar outputEnable = (index >= lowerBound)
                            & (index <  lowerBound + minStreamLength);
        io.output("output", sum16, dataType, outputEnable);
    }
}
