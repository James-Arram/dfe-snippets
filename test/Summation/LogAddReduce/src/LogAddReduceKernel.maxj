/***
    This kernel implements add-reduce circuit with logarithmic
    number of adders (wrt to the maximum number of values in the stream
    to be correctly reduced). Here we make it with 4 adders to
    reduce up to 16 values (for longer streams one may compute up to
    16 partial sums first, given adder latency ~13).
*/
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import com.custom_computing_ic.dfe_snippets.reductions.*;

class LogAddReduceKernel extends Kernel {

    private static final int     counterWidth = 32;
    private static final DFEType dataType   = dfeFloat(11, 53); // C double
    private static final DFEType scalarType = dfeUInt(counterWidth);

    private static final int     maxTermsToReduce = 16;

    protected LogAddReduceKernel(KernelParameters parameters)
    {
        super(parameters);

        DFEVar input = io.input("input",   dataType);
        DFEVar nnz   = io.input("nnz",     scalarType);

        Params  nnzParam = control.count.makeParams(counterWidth).withMax( nnz );
        Counter termNum  = control.count.makeCounter(nnzParam);

        DFEVar inputAlwaysComes = constant.var(dfeBool(), 1);
        DFEVar flush = termNum.getCount().eq(nnz-1);

        LogAddReduce r = new LogAddReduce(this, inputAlwaysComes, flush, input, dataType, maxTermsToReduce);

        // This would only work if the output PCIe stream length is multiple
        // of 16 bytes, e.g. 4 doubles.
        io.output("output", r.getOutput(), dataType, r.isOutputValid());
    }

}
