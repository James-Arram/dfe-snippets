import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;

public class DenseMatrixVectorMultiplyManager extends CustomManager{

    private static final String s_kernelName  = "DenseMatrixVectorMultiplyKernel";
    private static final int WIDTH = 48;
    private static final int MAX_B = 84000;

    DenseMatrixVectorMultiplyManager(EngineParameters ep) {
        super(ep);
        ManagerUtils.setDRAMFreq(this, ep, 800);
        config.setDefaultStreamClockFrequency(185);
        KernelBlock k = addKernel(new DenseMatrixVectorMultiplyKernel(
              makeKernelParameters(s_kernelName),
              WIDTH,
              MAX_B));
        addStreamToOnCardMemory("cpu2lmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("fromcpu");
        k.getInput("a") <== addStreamFromOnCardMemory("a", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
        addStreamToCPU("b") <== k.getOutput("b");
        k.getInput("v") <== addStreamFromCPU("v");
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface ei = new EngineInterface();

        InterfaceParam N = ei.addParam("N", CPUTypes.INT64);
        // number of iterations to perform
        InterfaceParam iterations = ei.addParam("iter", CPUTypes.INT64);
        InterfaceParam zero = ei.addConstant(0l);

        InterfaceParam bsize = N * CPUTypes.DOUBLE.sizeInBytes();
        InterfaceParam stripeWidth = ei.addConstant(WIDTH);

        //ei.setLMemLinear(
            //"a",
            //zero,
            //N * bsize);

        ei.setLMemLinearWrapped(
            "a",
            zero,
            N * bsize,
            iterations * N * bsize,
            zero);

        ei.setScalar(s_kernelName, "striperows", N);
        ei.setScalar(s_kernelName, "nstripes", N / stripeWidth);
        ei.setScalar(s_kernelName, "iterations", iterations);

        ei.setStream("v", CPUTypes.DOUBLE, bsize * iterations);
        ei.setStream("b", CPUTypes.DOUBLE, bsize * iterations);
        ei.setTicks(s_kernelName, N * N / stripeWidth * iterations);

        ei.ignoreLMem("cpu2lmem");
        ei.ignoreStream("fromcpu");
        return ei;
    }


    public static void main(String[] args) {
        DenseMatrixVectorMultiplyManager manager = new DenseMatrixVectorMultiplyManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.createSLiCinterface(ManagerUtils.interfaceWrite("write", "fromcpu", "cpu2lmem"));
//        ManagerUtils.debug(manager);

        // 4 cost tables, 2 parallel threads
        ManagerUtils.setFullBuild(manager, 6, 6);

        manager.build();
    }
}
