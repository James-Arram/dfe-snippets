/***
 * Implements a dense matrix vector multiply A * v = b where v is stored in
 * on-chip memory and A and b's are streamed
 *
 * Assumes a 2D strided access.
 *
 * Memory traffic could be reduced further by increasing the stride size in
 * bursts (currently 1 burst) and increasing the width of the input vector (v).
 */

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

import com.custom_computing_ic.dfe_snippets.blas.*;

class DenseMatrixVectorMultiplyKernel extends Kernel {

  protected DenseMatrixVectorMultiplyKernel(
      KernelParameters parameters,
      int width,
      int maxBsize) {
    super(parameters);
    optimization.pushDSPFactor(1);
    optimization.pushPipeliningFactor(0.5);
    DFEVectorType<DFEVar> vtype = new DFEVectorType<DFEVar> (dfeFloat(11, 53), width);
    DFEVar n = io.scalarInput("striperows", dfeUInt(32));
    DFEVar nstripes = io.scalarInput("nstripes", dfeUInt(32));
    DFEVar iterations = io.scalarInput("iterations", dfeUInt(32));

    // accumulated bs from previous iterations
    DFEVector<DFEVar> a = io.input("a", vtype);

    DenseBlasLib.FMemDMVM dmvm = DenseBlasLib.fmemDMVM(
        this, maxBsize, n, nstripes, iterations);
    DFEVector<DFEVar> v = io.input("v", vtype, dmvm.getReadEnable());
    dmvm.mult(a, v);

    // output results to CPU on the final column of the stripe
    io.output("b", dmvm.getRes(), dfeFloat(11, 53), dmvm.getWriteEnable());
  }
}

class DenseMatrixVectorMultiplyLMemKernel extends Kernel {

  protected DenseMatrixVectorMultiplyLMemKernel(
      KernelParameters parameters,
      int width,
      int maxBsize) {
    super(parameters);
    optimization.pushDSPFactor(1);
    optimization.pushPipeliningFactor(0.5);
    DFEVectorType<DFEVar> vtype = new DFEVectorType<DFEVar> (dfeFloat(11, 53), width);
    DFEVar n = io.scalarInput("striperows", dfeUInt(32));
    DFEVar nstripes = io.scalarInput("nstripes", dfeUInt(32));
    DFEVar iterations = io.scalarInput("iterations", dfeUInt(32));

    DFEVector<DFEVar> a = io.input("a", vtype);
    DFEVar b = io.input("prevb", dfeFloat(11, 53));

    DenseBlasLib.LMemDMVM dmvm = DenseBlasLib.lmemDMVM(
        this, maxBsize, n, nstripes, iterations);
    DFEVector<DFEVar> v = io.input("v", vtype, dmvm.getReadEnable());
    dmvm.mult(a, v, b);

    io.output("b", dmvm.getRes(), dfeFloat(11, 53));
  }
}
