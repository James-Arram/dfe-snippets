/***
 * Implements a dense matrix vector multiply A * v = b where v is stored in
 * on-chip memory and A and b's are streamed
 *
 * Assumes a 2D strided access.
 *
 * Memory traffic could be reduced further by increasing the stride size in
 * bursts (currently 1 burst) and increasing the width of the input vector (v).
 */

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.*;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

import com.custom_computing_ic.dfe_snippets.utils.Reductions;

class DenseMatrixVectorMultiplyKernel extends Kernel {

    protected DenseMatrixVectorMultiplyKernel(
        KernelParameters parameters,
        int width,
        int maxBsize) {
        super(parameters);
        optimization.pushDSPFactor(1);
        optimization.pushPipeliningFactor(0.5);
        DFEVectorType<DFEVar> vtype = new DFEVectorType<DFEVar> (dfeFloat(11, 53), width);
        DFEVar n = io.scalarInput("striperows", dfeUInt(32));
        DFEVar nstripes = io.scalarInput("nstripes", dfeUInt(32));

        // accumulated bs from previous iterations
        DFEVector<DFEVar> a = io.input("a", vtype);

        CounterChain chain = control.count.makeCounterChain();
        DFEVar stripeCount = chain.addCounter(nstripes, 1);
        DFEVar row = chain.addCounter(n, 1);

        // only read on the first cycle of each stripe
        DFEVar readEnable = row === 0;
        DFEVector<DFEVar> v = io.input("v", vtype, readEnable);

        // Previous b values are accumulated in BRAMs
        DFEVector<DFEVar> mult = a * v;
        Memory<DFEVar> bmem = mem.alloc(dfeFloat(11, 53), maxBsize);
        DFEVar addr  = row.cast(dfeUInt(MathUtils.bitsToAddress(maxBsize)));
        DFEVar prevb = bmem.read(addr);

        DFEVar res = prevb + Reductions.reduce(mult.getElementsAsList());
        bmem.write(
           stream.offset(addr, -16),
           stream.offset(res, -16),
           stripeCount === stripeCount);

  //        io.output("newb", res, dfeFloat(11, 53));
        DFEVar writeEnable = stripeCount === (nstripes - 1);

        // output results to CPU on the final column of the stripe
        io.output("b", res, dfeFloat(11, 53), writeEnable);

        //debug.simPrintf("-------------------------------------");
        //debug.simPrintf("row: %d stripe: %d prevb %f newb %f\n",
            //row, stripeCount, prevb, res);
        //debug.simPrintf("a = ");
        //for (int i = 0; i < width; i ++)
          //debug.simPrintf("%.1f ", a[i]);
        //debug.simPrintf("\n");

        //debug.simPrintf("v = ");
        //for (int i = 0; i < width; i ++)
          //debug.simPrintf("%.1f ", v[i]);
        //debug.simPrintf("\n");
    }
}
