import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class SparseDotProductManager extends CustomManager{

    private static final String s_kernelName  = "SparseDotProductKernel";
    private static final int    sumLoopLength = 16;
    private static final int    minimalPciStreamLength = 4;

    SparseDotProductManager(EngineParameters ep)
    {
        super(ep);

        KernelBlock k = addKernel(
            new SparseDotProductKernel(makeKernelParameters(s_kernelName),
                                                sumLoopLength,
                                                minimalPciStreamLength));

        DFELink x = addStreamFromCPU("sparseIndex");
        k.getInput("sparseIndex") <== x;

        DFELink y = addStreamToCPU("output");
        y <== k.getOutput("output");
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes   type = CPUTypes.FLOAT;
        int        size = type.sizeInBytes();

        InterfaceParam N              = engine_interface.addParam("N", CPUTypes.INT);
        InterfaceParam inputInBytes   = N * size;

        InterfaceParam partialInBytes = engine_interface.addConstant(sumLoopLength) * size;
        InterfaceParam outputInBytes  = engine_interface.addConstant(minimalPciStreamLength) * size;

        engine_interface.setTicks(s_kernelName, N);

        engine_interface.setScalar(s_kernelName, "totalNonZeros", N);
        engine_interface.setStream("sparseIndex",   CPUTypes.UINT8, inputInBytes);
        engine_interface.setStream("output",  type, outputInBytes);
        return engine_interface;
    }


    public static void main(String[] args) {
        SparseDotProductManager manager =
            new SparseDotProductManager(new EngineParameters(args));

        // this generates C defines in Maxfiles.h so that CPU code
        // knows the constants
        manager.addMaxFileConstant("sumLoopLength", sumLoopLength);
        manager.addMaxFileConstant("minimalPciStreamLength", minimalPciStreamLength);
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}
