import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class ParallelCsrDecoderManager extends CustomManager{

    private static final String s_kernelName  = "ParallelCsrDecoderKernel";
    private static final int inputWidth = 8;

    ParallelCsrDecoderManager(EngineParameters ep)
    {
        super(ep);

        KernelBlock k = addKernel(new ParallelCsrDecoderKernel(
              makeKernelParameters(s_kernelName), inputWidth));

        k.getInput("a") <== addStreamFromCPU("a");
        addStreamToCPU("output") <== k.getOutput("output");
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes type = CPUTypes.INT32;
        int size = type.sizeInBytes();

        InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT);
        InterfaceParam sizeBytes = N * size;

        engine_interface.setTicks(s_kernelName, N / inputWidth);

        engine_interface.setStream("a", type, sizeBytes);
        engine_interface.setStream("output", type, sizeBytes);
        return engine_interface;
    }


    public static void main(String[] args) {
        ParallelCsrDecoderManager manager = new ParallelCsrDecoderManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}
