import com.maxeler.maxcompiler.v2.managers.engine_interfaces.*;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.*;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;

import com.custom_computing_ic.dfe_snippets.manager.ManagerUtils;
import com.custom_computing_ic.dfe_snippets.sparse.ParallelCsrReadControl;

public class ParallelCsrDecoderManager extends CustomManager{

    private static final String s_kernelName  = "ParallelCsrDecoderKernel";
    private static final int inputWidth = 48;

    ParallelCsrDecoderManager(EngineParameters ep)
    {
        super(ep);

        //KernelBlock k = addKernel(new ParallelCsrDecoderKernel(
              //makeKernelParameters(s_kernelName), inputWidth));

        StateMachineBlock readSm = addStateMachine("readSm", new ParallelCsrReadControl(this, inputWidth));
        KernelBlock k = addKernel(new ParallelKernelTwo(
              makeKernelParameters(s_kernelName), inputWidth));

        k.getInput("a") <== addStreamFromOnCardMemory("a", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);

        readSm.getInput("length") <== addStreamFromCPU("length");
        k.getInput("readenable") <== readSm.getOutput("readenable");
        k.getInput("readmask") <== readSm.getOutput("readmask");

        addStreamToCPU("output") <== k.getOutput("output");

        addMaxFileConstant("inputWidth", inputWidth);

        addStreamToOnCardMemory("cpu2lmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("fromcpu");
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface ei = new EngineInterface();
        CPUTypes type = CPUTypes.UINT32;
        int size = type.sizeInBytes();

        InterfaceParam ticks = ei.addParam("ticks", CPUTypes.INT);
        ei.setTicks(s_kernelName, ticks);

        ei.ignoreLMem("cpu2lmem");
        ei.ignoreStream("fromcpu");
        return ei;
    }


    public static void main(String[] args) {
        ParallelCsrDecoderManager manager = new ParallelCsrDecoderManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.createSLiCinterface(
            ManagerUtils.interfaceWrite(
              "ParallelCsrWrite",
              "fromcpu",
              "cpu2lmem"));
        ManagerUtils.setFullBuild(manager, 4, 4);
        manager.build();
    }
}
