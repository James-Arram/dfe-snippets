import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

import com.custom_computing_ic.dfe_snippets.utils.FetchSubTuple;

class ParallelKernelTwo extends Kernel {

  protected ParallelKernelTwo(KernelParameters parameters, int inputWidth) {
    super(parameters);
    DFEVectorType<DFEVar> vtype = new DFEVectorType<DFEVar> (dfeFloat(11, 53), inputWidth);
    DFEVar readEnable = io.input("readenable", dfeBool());
    DFEVector<DFEVar> a = io.input("a", vtype, readEnable);

    DFEVar readMask = io.input("readmask", dfeUInt(inputWidth));

    DFEVector<DFEVar> out = vtype.newInstance(this);
    for (int i = 0; i < inputWidth; i++) {
      out[i] <== readMask.slice(i) === 0 ?
        0 : a[i];
    }

    io.output("output", out, vtype);
  }
}
