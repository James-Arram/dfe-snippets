/***
    Here we provide two example use cases of a small FIFO buffer.
*/

import com.custom_computing_ic.dfe_snippets.utils.FifoAsShiftRegister;


import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;

class FifoAsShiftRegisterKernel extends Kernel {

    private static final DFEType scalarType = dfeUInt(32);

    protected FifoAsShiftRegisterKernel(KernelParameters parameters, int fifoBufferCapacity) {
        super(parameters);

        DFEVar cycleCounter = control.count.simpleCounter(32);
        DFEVar numInputs = io.scalarInput("numInputs", scalarType);
        DFEVar input = io.input("input", scalarType, cycleCounter < numInputs);

        DFEVar onlyOddInputEnable = KernelMath.modulo(cycleCounter+1,2);
        DFEVar alwaysEnable = constant.var(dfeBool(), 1);

        /***
            Here we push new entries at every cycle; members of FIFO queue
            are shifted at each cycle as well, so the first input entry
            is popped out exactly fifoBufferCapacity cycles after.
        */
        FifoAsShiftRegister fifo1 = new FifoAsShiftRegister(this, fifoBufferCapacity, scalarType);
        DFEVar inputsShiftedInTime = fifo1.popPush(alwaysEnable, input);

        /***
            Here we not only push new entries only at odd kernel cycles (thus
            we ignore all inputs at odd cycles), we also shift FIFO members
            once in 2 cycles. The first input entry leaves the queue in
            2*fifoBufferCapacity cycles.
        */
        FifoAsShiftRegister fifo2 = new FifoAsShiftRegister(this, fifoBufferCapacity, scalarType);
        DFEVar onlyOddInputs = fifo2.popPush(onlyOddInputEnable, input);


        io.output("inputsShiftedInTime", inputsShiftedInTime, scalarType);
        io.output("onlyOddInputs", onlyOddInputs, scalarType);
    }
}
