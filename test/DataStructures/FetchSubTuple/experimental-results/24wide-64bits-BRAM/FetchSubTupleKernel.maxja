    LUTs     FFs   BRAMs    DSPs : FetchSubTupleKernel.maxj
    6057    6871      48       0 : resources used by this file
   1.15%   0.65%   1.87%   0.00% : % of available
  44.74%  36.13%  24.87%   0.00% : % of total used
  94.18%  73.53% 100.00%   0.00% : % of user resources

                                 : /***
                                 :     Here we provide an example use case of irregular fetch buffer.
                                 : 
                                 :     Normally, each cycle we push tupleSize values to the buffer and fetch
                                 :     only the number of entries specified by control stream 'sizes'.
                                 : 
                                 :     The buffer occasionally issues stall signal (nextPushEnable() == 0)
                                 :     to avoid overflow of internal FIFOs. To complicate the example further,
                                 :     we occasionally disable data pushes and pops.
                                 : 
                                 : */
                                 : 
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
                                 : 
                                 : import com.custom_computing_ic.dfe_snippets.utils.FetchSubTuple;
                                 : 
                                 : class FetchSubTupleKernel extends Kernel
                                 : {
                                 :     private static final DFEType floatType  = dfeFloat(11,53);
                                 :     private static final DFEType scalarType = dfeUInt(32);
                                 : 
                                 :     protected FetchSubTupleKernel(KernelParameters parameters, int tupleSize)
                                 :     {
                                 :         super(parameters);
                                 : 
                                 :         DFEVectorType<DFEVar> tupleType =
                                 :                 new DFEVectorType<DFEVar> (floatType, tupleSize);
                                 : 
      70     107       0       0 :         DFEVar cycleCounter = control.count.simpleCounter(32);
       1       1       0       0 :         DFEVar prefetchEnable = cycleCounter < 1;
       5       4       0       0 :         DFEVar pushEnable = ~prefetchEnable & ( (cycleCounter < 27) | (cycleCounter > 30) );
      11       4       0       0 :         DFEVar popEnable  = ~prefetchEnable & ( (cycleCounter < 10) | (cycleCounter > 11) );
                                 : 
                                 :         debug.simPrintf("\ncycle=%d ", cycleCounter);
                                 : 
                                 : 
                                 : 
                                 :         DFEVar dataRequestEnableLoop = dfeBool().newInstance(this);
       1       1       0       0 :         DFEVar dataRequestEnable = control.count.pulse(1)? 0 : stream.offset(dataRequestEnableLoop,-1);
                                 : 
       1       1       0       0 :         DFEVector<DFEVar> input = io.input("input", tupleType, dataRequestEnable);
       1      33       0       0 :         DFEVar size             = io.input("sizes", scalarType, popEnable);
                                 : 
                                 :         boolean alignOutput = true;
     482     366      48       0 :         FetchSubTuple buffer = new FetchSubTuple(this, "test", tupleSize, 64, floatType, alignOutput);
      16       0       0       0 :         DFEVar success = buffer.push(pushEnable, input);
       0      47       0       0 :         DFEVar subTupleSize = (popEnable)? size: 0;
    5457    6306       0       0 :         DFEVector<DFEVar> outTuple = buffer.pop(subTupleSize);
                                 : 
      12       1       0       0 :         dataRequestEnableLoop <== buffer.nextPushEnable() & stream.offset(pushEnable,1);
                                 : 
                                 : 
                                 :         debug.simPrintf("|prefetchEnable=%d, pushEnable=%d, popEnable=%d, size=%d, subTupleSize=%d, dataRequestEnable=%d, nextPushEnable=%d, pushSuccessful=%d, ",
                                 :                           prefetchEnable, pushEnable, popEnable, size, subTupleSize, dataRequestEnable, dataRequestEnableLoop, success);
                                 :         debug.simPrintf("outTuple: ");
                                 :         for (int i = 0; i < tupleSize; i++)
                                 :         {
                                 :             debug.simPrintf("%f ", outTuple[i]);
                                 :         }
                                 : 
                                 :         io.output("output", outTuple, tupleType);
                                 :     }
                                 : }
