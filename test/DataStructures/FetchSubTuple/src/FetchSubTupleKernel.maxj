/***
    Here we provide an example use case of irregular fetch buffer.

    Normally, each cycle we push tupleSize values to the buffer and fetch
    only the number of entries specified by control stream 'sizes'.

    The buffer occasionally issues stall signal (nextPushEnable() == 0)
    to avoid overflow of internal FIFOs. To complicate the example further,
    we occasionally disable data pushes and pops.

*/

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

import com.custom_computing_ic.dfe_snippets.utils.FetchSubTuple;

class FetchSubTupleKernel extends Kernel
{
    private static final DFEType floatType  = dfeFloat(11,53);
    private static final DFEType scalarType = dfeUInt(32);

    protected FetchSubTupleKernel(KernelParameters parameters, int tupleSize)
    {
        super(parameters);

        DFEVectorType<DFEVar> tupleType =
                new DFEVectorType<DFEVar> (floatType, tupleSize);

        DFEVar cycleCounter = control.count.simpleCounter(32);
        DFEVar prefetchEnable = cycleCounter < 1;
        DFEVar pushEnable = ~prefetchEnable & ( (cycleCounter < 27) | (cycleCounter > 30) );
        DFEVar popEnable  = ~prefetchEnable & ( (cycleCounter < 10) | (cycleCounter > 11) );




        DFEVar dataRequestEnableLoop = dfeBool().newInstance(this);
        DFEVar dataRequestEnable = control.count.pulse(1)? 0 : stream.offset(dataRequestEnableLoop,-1);

        DFEVar pushEnable2 = dataRequestEnable & pushEnable;

        //debug.simPrintf("\ncycle=%d, pushEnable2=%d | ", cycleCounter, pushEnable2);

        DFEVector<DFEVar> input = io.input("input", tupleType, dataRequestEnable);
        DFEVar size             = io.input("sizes", scalarType, popEnable);

        boolean alignOutput = false;
        FetchSubTuple buffer = new FetchSubTuple(this, "test", tupleSize, 64, floatType, alignOutput);
        DFEVar subTupleSize = (popEnable)? size: 0;
        DFEVector<DFEVar> outTuple = buffer.popPush(subTupleSize, pushEnable2, input);

        dataRequestEnableLoop <== buffer.nextPushEnable();

/*
        debug.simPrintf("|prefetchEnable=%d, pushEnable=%d, popEnable=%d, size=%d, subTupleSize=%d, dataRequestEnable=%d, nextPushEnable=%d, ",
                          prefetchEnable, pushEnable, popEnable, size, subTupleSize, dataRequestEnable, dataRequestEnableLoop);
        debug.simPrintf("outTuple: ");
        for (int i = 0; i < tupleSize; i++)
        {
            debug.simPrintf("%f ", outTuple[i]);
        }
*/
        io.output("output", outTuple, tupleType);
    }
}
