/***
 This kernel implements
   - input that controls itself via feedback loop,
   - counter that counts up to every new value that comes from input stream,
   - small FIFO buffer as shift register.
 Assuming input is integer > 0.

 Example input stream and corresponding counter values:
 input         (8 items):  2,  6,          1,7             4,      2,  4,      6
 outerCounter (32 items):  0,0,1,1,1,1,1,1,2,3,3,3,3,3,3,3,4,4,4,4,5,5,6,6,6,6,7,7,7,7,7,7
 innerCounter (32 items):  0,1,0,1,2,3,4,5,0,0,1,2,3,4,5,6,0,1,2,3,0,1,0,1,2,3,0,1,2,3,4,5

 Use case: nested loop of the form
   for (int i = 0; i < n; i++)
     for (int j = 0; j < input[i]; j++) {...}

 Implementation strategy: io.input has it's own latency, so we cannot 
 put simple feedback loop to control the input. Here, we buffer the 
 input with a FIFO shift register to hide input latency. Each value read 
 from a buffer sets up a counter counting up to that value (interpret
 this value as a number of cycles to hold for the next data retrieval).
 The wrap point of a counter triggers reading next value from FIFO 
 buffer, as well as getting new value from an input (if any). First
 bufferSize cycles the kernel stalls but prefetches io.input values to
 fill the FIFO.

*/
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEArray;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEArrayType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class InputDependentCounterKernel extends Kernel
{

    private static final int dataWidth = 32;
    private static final DFEType dataType  = dfeUInt(dataWidth);

    protected InputDependentCounterKernel(KernelParameters parameters, int bufferSize)
    {
        super(parameters);

        DFEVar prefetchEnable     = control.count.pulse(bufferSize);
        DFEVar nextEnableLoopBack = dfeBool().newInstance(this);

        // value of nextEnableLoopBack is undefined at 1st cycle
        DFEVar thisEnable =  stream.offset(nextEnableLoopBack, -1);

        DFEVar upperBound = io.input("input", dataType, thisEnable);

        // Store input value in a FIFO buffer to hide latency of io.input.
        DFEVar storedUpperBound = fifoBufferPushPop(thisEnable, upperBound, bufferSize, dataType);

        // start counting up until currently retrieved value
        // (and hold for the first few pre-fetch cycles)
        Params repeatParam = control.count.makeParams(dataWidth)
                        .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP)
                        .withEnable( ~prefetchEnable )
                        .withMax( storedUpperBound );
        Counter innerCounter = control.count.makeCounter(repeatParam);

        Params param = control.count.makeParams(dataWidth)
                            .withEnable( innerCounter.getWrap() );
        Counter outerCounter = control.count.makeCounter(param);


        optimization.pushPipeliningFactor(0.0);
        nextEnableLoopBack <== prefetchEnable | innerCounter.getWrap();
        optimization.popPipeliningFactor();


        /**************************************************
        */

        io.output("currentBound", storedUpperBound,        dataType, ~prefetchEnable);
        io.output("innerCounter", innerCounter.getCount(), dataType, ~prefetchEnable);
        io.output("outerCounter", outerCounter.getCount(), dataType, ~prefetchEnable);

    }

    /***
        This implements small FIFO buffer with 1 cycle latency (shift register).
        Input value is put to the end of a buffer and will come out (return value)
        only after bufferSize enabled cycles.
    */
    private DFEVar fifoBufferPushPop(DFEVar enable, DFEVar input, int bufferSize, DFEType dataType)
    {
        DFEArray<DFEVar> fifoBuffer = new DFEArrayType<DFEVar> (dataType, bufferSize).newInstance(this);
        DFEVar stored = dataType.newInstance(this);

        optimization.pushPipeliningFactor(0.0);
        {
            stored <== enable? stream.offset(fifoBuffer[bufferSize-1],-1) : stream.offset(stored,-1);
            for (int i = 1; i < bufferSize; i++)
            {
                fifoBuffer[i] <== enable? stream.offset(fifoBuffer[i-1],-1) : stream.offset(fifoBuffer[i],-1);
            }
            fifoBuffer[0] <== enable? input : stream.offset(fifoBuffer[0],-1);
        }
        optimization.popPipeliningFactor();

        return stored;
    }

}  // class
