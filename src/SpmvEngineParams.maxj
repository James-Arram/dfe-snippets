import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class SpmvEngineParams extends EngineParameters {

    // -- Debug flags
    private static final boolean debug = false;
    private static final boolean debugSm = false;
    private static final boolean debugKernel = false;
    private static final boolean debugDecoder = false;
    private static final boolean debugOutputSm = false;

    // -- Design Parameters
    private static final int numPipes = 2;
    private static final int floatingPointLatency = 16;
    private static final int decodingTableBitWidth = 8;
    private static final boolean doublePrecisionTable = true;
    private static final boolean enableDecoderPortSharing = true;
    private static final boolean enableVRomPortSharing = true;
    private static final int vectorCacheSize = 16 * 1024;

    // -- Build params
    private static final boolean highEffort = true;

    SpmvEngineParams(String... args) {
        super(args);
    }

    @Override
    protected void declarations() {
        declareParam("debug", DataType.BOOL, debug);
        declareParam("debugSm", DataType.BOOL, debugSm);
        declareParam("debugKernel", DataType.BOOL, debugKernel);
        declareParam("debugDecoder", DataType.BOOL, debugDecoder);
        declareParam("debugOutputSm", DataType.BOOL, debugOutputSm);

        declareParam("floatingPointLatency", DataType.INT, floatingPointLatency);
        declareParam("numPipes", DataType.INT, numPipes);
        declareParam("decodingTableBitWidth", DataType.INT, decodingTableBitWidth);
        declareParam("doublePrecisionTable", DataType.BOOL, doublePrecisionTable);
        declareParam("enableDecoderPortSharing", DataType.BOOL, enableDecoderPortSharing);
        declareParam("enableVRomPortSharing", DataType.BOOL, enableVRomPortSharing);
        declareParam("vectorCacheSize", DataType.INT, vectorCacheSize);

        declareParam("highEffort", DataType.BOOL, highEffort);
    }

    public String getBuildName() {

        // we don't label simulation builds
        if (getTarget() == Target.DFE_SIM)
            return super.getBuildName();

        String base = getMaxFileName() + "_" + getDFEModel() + "_" + getTarget() + "_";
        String params = getNumPipes() + "pipes_" + getDecodingTableBitWidth() + "decoding_bits_";
        String prec = getDoublePrecisionTable() ? "dp" : "sp";
        return base + params + prec + getHighEffort();
    }

    public int getNumPipes() {
        return getParam("numPipes");
    }

    public int getVectorCacheSize() {
        return getParam("vectorCacheSize");
    }

    public int getFloatingPointLatency() {
        return getParam("floatingPointLatency");
    }

    public int getDecodingTableBitWidth() {
        return getParam("decodingTableBitWidth");
    }

    public boolean getDebugKernel() {
        return getParam("debugKernel");
    }

    public boolean getDebugSm() {
        return getParam("debugSm");
    }

    public boolean getDebugDecoder() {
        return getParam("debugDecoder");
    }

    public boolean getDebug() {
        return getParam("debug");
    }

    public boolean getDebugOutputSm() {
        return getParam("debugOutputSm");
    }

    public boolean getDoublePrecisionTable() {
        return getParam("doublePrecisionTable");
    }

    public boolean getEnableDecoderPortSharing() {
        return getParam("enableDecoderPortSharing");
    }

    public boolean getEnableVRomPortSharing() {
        return getParam("enableVRomPortSharing");
    }

    public boolean getHighEffort() {
        return getParam("highEffort");
    }
}
